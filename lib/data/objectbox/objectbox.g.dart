// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_sync_flutter_libs/objectbox_sync_flutter_libs.dart';

import '../../data/entities/budget.dart';
import '../../data/entities/category.dart';
import '../../data/entities/payment_method.dart';
import '../../data/entities/recurring_transaction.dart';
import '../../data/entities/transaction.dart';
import '../../data/entities/user.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 3697693743234403229),
    name: 'User',
    lastPropertyId: const obx_int.IdUid(6, 4679970588478689942),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 5327466088276136818),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 560190060910269304),
        name: 'name',
        type: 9,
        flags: 2080,
        indexId: const obx_int.IdUid(1, 1441455354396562553),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 8313325085214270348),
        name: 'createdAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 10339671977305324),
        name: 'email',
        type: 9,
        flags: 2080,
        indexId: const obx_int.IdUid(8, 930685476418907478),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 4383210036908708845),
        name: 'currency',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 4679970588478689942),
        name: 'language',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 4881306474892250789),
    name: 'Budget',
    lastPropertyId: const obx_int.IdUid(7, 5885791248674544059),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3430678885858019944),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5195210334020333383),
        name: 'categoryIdId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(2, 7698458738305419033),
        relationTarget: 'Category',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 907746399202025936),
        name: 'amount',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1714670655134882079),
        name: 'spent',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 5624040681914985866),
        name: 'startDate',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 8401191334292824922),
        name: 'endDate',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 5885791248674544059),
        name: 'goalAmount',
        type: 8,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 8389170420291958458),
    name: 'Category',
    lastPropertyId: const obx_int.IdUid(5, 6149301141097753856),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 91233643991232084),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 3960047679987056659),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 4501067257139745436),
        name: 'isIncome',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 4863093944260529921),
        name: 'description',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 6149301141097753856),
        name: 'parentCategoryId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(3, 4304487126258234861),
        relationTarget: 'Category',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 1195267970998249339),
    name: 'PaymentMethod',
    lastPropertyId: const obx_int.IdUid(3, 3770819237924802994),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 5009105957234423200),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6241003050833108812),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3770819237924802994),
        name: 'description',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(5, 8678650274571129440),
    name: 'RecurringTransaction',
    lastPropertyId: const obx_int.IdUid(3, 8765854534955240285),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7234486432560817486),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 8493226196114292061),
        name: 'transactionIdId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(4, 736973411860776471),
        relationTarget: 'Transaction',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 8765854534955240285),
        name: 'nextPaymentDate',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(6, 5450318839250540201),
    name: 'Transaction',
    lastPropertyId: const obx_int.IdUid(10, 4862898281626917457),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7394216470537392634),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 3759780525841633874),
        name: 'date',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 8035530701461784547),
        name: 'amount',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 467477562441935273),
        name: 'description',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 3088262554528557860),
        name: 'categoryIdId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(5, 589056365581741503),
        relationTarget: 'Category',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 7929533445934886729),
        name: 'paymentMethodIdId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(6, 8017851447156251253),
        relationTarget: 'PaymentMethod',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 2627754397037457340),
        name: 'userIdId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(7, 202192739719476086),
        relationTarget: 'User',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 7578339729696629421),
        name: 'isRecurring',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 276923222364247004),
        name: 'recurrenceInterval',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 4862898281626917457),
        name: 'status',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(6, 5450318839250540201),
    lastIndexId: const obx_int.IdUid(8, 930685476418907478),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    User: obx_int.EntityDefinition<User>(
      model: _entities[0],
      toOneRelations: (User object) => [],
      toManyRelations: (User object) => {},
      getId: (User object) => object.id,
      setId: (User object, int id) {
        object.id = id;
      },
      objectToFB: (User object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final emailOffset = fbb.writeString(object.email);
        final currencyOffset = fbb.writeString(object.currency);
        final languageOffset = fbb.writeString(object.language);
        fbb.startTable(7);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addInt64(2, object.createdAt.millisecondsSinceEpoch);
        fbb.addOffset(3, emailOffset);
        fbb.addOffset(4, currencyOffset);
        fbb.addOffset(5, languageOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final emailParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final currencyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final languageParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
        );
        final object = User(
          name: nameParam,
          email: emailParam,
          currency: currencyParam,
          language: languageParam,
          createdAt: createdAtParam,
        )..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

        return object;
      },
    ),
    Budget: obx_int.EntityDefinition<Budget>(
      model: _entities[1],
      toOneRelations: (Budget object) => [object.categoryId],
      toManyRelations: (Budget object) => {},
      getId: (Budget object) => object.id,
      setId: (Budget object, int id) {
        object.id = id;
      },
      objectToFB: (Budget object, fb.Builder fbb) {
        fbb.startTable(8);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.categoryId.targetId);
        fbb.addFloat64(2, object.amount);
        fbb.addFloat64(3, object.spent);
        fbb.addInt64(4, object.startDate.millisecondsSinceEpoch);
        fbb.addInt64(5, object.endDate.millisecondsSinceEpoch);
        fbb.addFloat64(6, object.goalAmount);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final amountParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        final spentParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        final startDateParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
        );
        final endDateParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0),
        );
        final goalAmountParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          16,
          0,
        );
        final object = Budget(
          amount: amountParam,
          spent: spentParam,
          startDate: startDateParam,
          endDate: endDateParam,
          goalAmount: goalAmountParam,
        )..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        object.categoryId.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        object.categoryId.attach(store);
        return object;
      },
    ),
    Category: obx_int.EntityDefinition<Category>(
      model: _entities[2],
      toOneRelations: (Category object) => [object.parentCategory],
      toManyRelations: (Category object) => {},
      getId: (Category object) => object.id,
      setId: (Category object, int id) {
        object.id = id;
      },
      objectToFB: (Category object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final descriptionOffset =
            object.description == null
                ? null
                : fbb.writeString(object.description!);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addBool(2, object.isIncome);
        fbb.addOffset(3, descriptionOffset);
        fbb.addInt64(4, object.parentCategory.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final isIncomeParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          8,
          false,
        );
        final descriptionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final object = Category(
          name: nameParam,
          isIncome: isIncomeParam,
          description: descriptionParam,
        )..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        object.parentCategory.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        object.parentCategory.attach(store);
        return object;
      },
    ),
    PaymentMethod: obx_int.EntityDefinition<PaymentMethod>(
      model: _entities[3],
      toOneRelations: (PaymentMethod object) => [],
      toManyRelations: (PaymentMethod object) => {},
      getId: (PaymentMethod object) => object.id,
      setId: (PaymentMethod object, int id) {
        object.id = id;
      },
      objectToFB: (PaymentMethod object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final descriptionOffset = fbb.writeString(object.description);
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, descriptionOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final descriptionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final object = PaymentMethod(
          name: nameParam,
          description: descriptionParam,
        )..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

        return object;
      },
    ),
    RecurringTransaction: obx_int.EntityDefinition<RecurringTransaction>(
      model: _entities[4],
      toOneRelations: (RecurringTransaction object) => [object.transactionId],
      toManyRelations: (RecurringTransaction object) => {},
      getId: (RecurringTransaction object) => object.id,
      setId: (RecurringTransaction object, int id) {
        object.id = id;
      },
      objectToFB: (RecurringTransaction object, fb.Builder fbb) {
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.transactionId.targetId);
        fbb.addInt64(2, object.nextPaymentDate.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final nextPaymentDateParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
        );
        final object = RecurringTransaction(
          nextPaymentDate: nextPaymentDateParam,
        )..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        object.transactionId.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        object.transactionId.attach(store);
        return object;
      },
    ),
    Transaction: obx_int.EntityDefinition<Transaction>(
      model: _entities[5],
      toOneRelations:
          (Transaction object) => [
            object.categoryId,
            object.paymentMethodId,
            object.userId,
          ],
      toManyRelations: (Transaction object) => {},
      getId: (Transaction object) => object.id,
      setId: (Transaction object, int id) {
        object.id = id;
      },
      objectToFB: (Transaction object, fb.Builder fbb) {
        final descriptionOffset = fbb.writeString(object.description);
        final recurrenceIntervalOffset =
            object.recurrenceInterval == null
                ? null
                : fbb.writeString(object.recurrenceInterval!);
        final statusOffset = fbb.writeString(object.status);
        fbb.startTable(11);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.date.millisecondsSinceEpoch);
        fbb.addFloat64(2, object.amount);
        fbb.addOffset(3, descriptionOffset);
        fbb.addInt64(4, object.categoryId.targetId);
        fbb.addInt64(5, object.paymentMethodId.targetId);
        fbb.addInt64(6, object.userId.targetId);
        fbb.addBool(7, object.isRecurring);
        fbb.addOffset(8, recurrenceIntervalOffset);
        fbb.addOffset(9, statusOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final dateParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
        );
        final amountParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        final descriptionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final isRecurringParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          18,
          false,
        );
        final recurrenceIntervalParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 20);
        final statusParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 22, '');
        final object = Transaction(
          date: dateParam,
          amount: amountParam,
          description: descriptionParam,
          isRecurring: isRecurringParam,
          recurrenceInterval: recurrenceIntervalParam,
          status: statusParam,
        )..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        object.categoryId.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        object.categoryId.attach(store);
        object.paymentMethodId.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          14,
          0,
        );
        object.paymentMethodId.attach(store);
        object.userId.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          16,
          0,
        );
        object.userId.attach(store);
        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// See [User.id].
  static final id = obx.QueryIntegerProperty<User>(_entities[0].properties[0]);

  /// See [User.name].
  static final name = obx.QueryStringProperty<User>(_entities[0].properties[1]);

  /// See [User.createdAt].
  static final createdAt = obx.QueryDateProperty<User>(
    _entities[0].properties[2],
  );

  /// See [User.email].
  static final email = obx.QueryStringProperty<User>(
    _entities[0].properties[3],
  );

  /// See [User.currency].
  static final currency = obx.QueryStringProperty<User>(
    _entities[0].properties[4],
  );

  /// See [User.language].
  static final language = obx.QueryStringProperty<User>(
    _entities[0].properties[5],
  );
}

/// [Budget] entity fields to define ObjectBox queries.
class Budget_ {
  /// See [Budget.id].
  static final id = obx.QueryIntegerProperty<Budget>(
    _entities[1].properties[0],
  );

  /// See [Budget.categoryId].
  static final categoryId = obx.QueryRelationToOne<Budget, Category>(
    _entities[1].properties[1],
  );

  /// See [Budget.amount].
  static final amount = obx.QueryDoubleProperty<Budget>(
    _entities[1].properties[2],
  );

  /// See [Budget.spent].
  static final spent = obx.QueryDoubleProperty<Budget>(
    _entities[1].properties[3],
  );

  /// See [Budget.startDate].
  static final startDate = obx.QueryDateProperty<Budget>(
    _entities[1].properties[4],
  );

  /// See [Budget.endDate].
  static final endDate = obx.QueryDateProperty<Budget>(
    _entities[1].properties[5],
  );

  /// See [Budget.goalAmount].
  static final goalAmount = obx.QueryDoubleProperty<Budget>(
    _entities[1].properties[6],
  );
}

/// [Category] entity fields to define ObjectBox queries.
class Category_ {
  /// See [Category.id].
  static final id = obx.QueryIntegerProperty<Category>(
    _entities[2].properties[0],
  );

  /// See [Category.name].
  static final name = obx.QueryStringProperty<Category>(
    _entities[2].properties[1],
  );

  /// See [Category.isIncome].
  static final isIncome = obx.QueryBooleanProperty<Category>(
    _entities[2].properties[2],
  );

  /// See [Category.description].
  static final description = obx.QueryStringProperty<Category>(
    _entities[2].properties[3],
  );

  /// See [Category.parentCategory].
  static final parentCategory = obx.QueryRelationToOne<Category, Category>(
    _entities[2].properties[4],
  );
}

/// [PaymentMethod] entity fields to define ObjectBox queries.
class PaymentMethod_ {
  /// See [PaymentMethod.id].
  static final id = obx.QueryIntegerProperty<PaymentMethod>(
    _entities[3].properties[0],
  );

  /// See [PaymentMethod.name].
  static final name = obx.QueryStringProperty<PaymentMethod>(
    _entities[3].properties[1],
  );

  /// See [PaymentMethod.description].
  static final description = obx.QueryStringProperty<PaymentMethod>(
    _entities[3].properties[2],
  );
}

/// [RecurringTransaction] entity fields to define ObjectBox queries.
class RecurringTransaction_ {
  /// See [RecurringTransaction.id].
  static final id = obx.QueryIntegerProperty<RecurringTransaction>(
    _entities[4].properties[0],
  );

  /// See [RecurringTransaction.transactionId].
  static final transactionId =
      obx.QueryRelationToOne<RecurringTransaction, Transaction>(
        _entities[4].properties[1],
      );

  /// See [RecurringTransaction.nextPaymentDate].
  static final nextPaymentDate = obx.QueryDateProperty<RecurringTransaction>(
    _entities[4].properties[2],
  );
}

/// [Transaction] entity fields to define ObjectBox queries.
class Transaction_ {
  /// See [Transaction.id].
  static final id = obx.QueryIntegerProperty<Transaction>(
    _entities[5].properties[0],
  );

  /// See [Transaction.date].
  static final date = obx.QueryDateProperty<Transaction>(
    _entities[5].properties[1],
  );

  /// See [Transaction.amount].
  static final amount = obx.QueryDoubleProperty<Transaction>(
    _entities[5].properties[2],
  );

  /// See [Transaction.description].
  static final description = obx.QueryStringProperty<Transaction>(
    _entities[5].properties[3],
  );

  /// See [Transaction.categoryId].
  static final categoryId = obx.QueryRelationToOne<Transaction, Category>(
    _entities[5].properties[4],
  );

  /// See [Transaction.paymentMethodId].
  static final paymentMethodId =
      obx.QueryRelationToOne<Transaction, PaymentMethod>(
        _entities[5].properties[5],
      );

  /// See [Transaction.userId].
  static final userId = obx.QueryRelationToOne<Transaction, User>(
    _entities[5].properties[6],
  );

  /// See [Transaction.isRecurring].
  static final isRecurring = obx.QueryBooleanProperty<Transaction>(
    _entities[5].properties[7],
  );

  /// See [Transaction.recurrenceInterval].
  static final recurrenceInterval = obx.QueryStringProperty<Transaction>(
    _entities[5].properties[8],
  );

  /// See [Transaction.status].
  static final status = obx.QueryStringProperty<Transaction>(
    _entities[5].properties[9],
  );
}
